jobs:
  loop:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    concurrency:
      group: wave-rotation-loop
      cancel-in-progress: true
    permissions:
      contents: read

    env:
      # Vincoli anti no_adapter/scan
      SEARCH_SCOPE: CONFIG_ONLY
      ALLOWED_CHAIN_IDS: 8453
      REQUIRE_ADAPTER_BEFORE_RANK: 1
      WAVE_LOOP_INTERVAL_SECONDS: 300
      PORTFOLIO_DRY_RUN: "true"
      ONCHAIN_ENABLED: "false"
      VAULT_ABI_SOURCE: etherscan_v2

      # VARS (repo variables)
      AAVE_POOL_ADDRESS_8453: ${{ vars.AAVE_POOL_ADDRESS_8453 }}
      AAVE_WETH_GATEWAY_8453: ${{ vars.AAVE_WETH_GATEWAY_8453 }}
      AERODROME_ROUTER_8453:  ${{ vars.AERODROME_ROUTER_8453 }}
      USDC_BASE:              ${{ vars.USDC_BASE }}
      USDT_BASE:              ${{ vars.USDT_BASE }}
      EURC_BASE:              ${{ vars.EURC_BASE }}
      CBBTC_BASE:             ${{ vars.CBBTC_BASE }}
      YEARN_USDC_VAULT_BASE:  ${{ vars.YEARN_USDC_VAULT_BASE }}
      YEARN_WETH_VAULT_BASE:  ${{ vars.YEARN_WETH_VAULT_BASE }}
      COMET_USDC_MARKET_BASE: ${{ vars.COMET_USDC_MARKET_BASE }}
      COMET_USDBC_MARKET_BASE: ${{ vars.COMET_USDBC_MARKET_BASE }}
      MOONWELL_USDC_CTOKEN:   ${{ vars.MOONWELL_USDC_CTOKEN }}
      MOONWELL_WETH_CTOKEN:   ${{ vars.MOONWELL_WETH_CTOKEN }}
      MOONWELL_CBETH_CTOKEN:  ${{ vars.MOONWELL_CBETH_CTOKEN }}
      MORPHO_USDC_VAULT_BASE: ${{ vars.MORPHO_USDC_VAULT_BASE }}
      MORPHO_WETH_VAULT_BASE: ${{ vars.MORPHO_WETH_VAULT_BASE }}
      UNISWAP_V2_ROUTER_BASE: ${{ vars.UNISWAP_V2_ROUTER_BASE }}
      UNISWAP_V3_NFT_MANAGER_BASE: ${{ vars.UNISWAP_V3_NFT_MANAGER_BASE }}
      WETH_YIELD_VAULT_BASE:  ${{ vars.WETH_YIELD_VAULT_BASE }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install deps
        run: pip install -r bots/wave_rotation/requirements.txt

      - name: Create temp .env
        run: |
          cat > .env <<'ENV'
          # --- VARS ---
          AAVE_POOL_ADDRESS_8453=${{ env.AAVE_POOL_ADDRESS_8453 }}
          AAVE_WETH_GATEWAY_8453=${{ env.AAVE_WETH_GATEWAY_8453 }}
          AERODROME_ROUTER_8453=${{ env.AERODROME_ROUTER_8453 }}
          USDC_BASE=${{ env.USDC_BASE }}
          USDT_BASE=${{ env.USDT_BASE }}
          EURC_BASE=${{ env.EURC_BASE }}
          CBBTC_BASE=${{ env.CBBTC_BASE }}
          YEARN_USDC_VAULT_BASE=${{ env.YEARN_USDC_VAULT_BASE }}
          YEARN_WETH_VAULT_BASE=${{ env.YEARN_WETH_VAULT_BASE }}
          COMET_USDC_MARKET_BASE=${{ env.COMET_USDC_MARKET_BASE }}
          COMET_USDBC_MARKET_BASE=${{ env.COMET_USDBC_MARKET_BASE }}
          MOONWELL_USDC_CTOKEN=${{ env.MOONWELL_USDC_CTOKEN }}
          MOONWELL_WETH_CTOKEN=${{ env.MOONWELL_WETH_CTOKEN }}
          MOONWELL_CBETH_CTOKEN=${{ env.MOONWELL_CBETH_CTOKEN }}
          MORPHO_USDC_VAULT_BASE=${{ env.MORPHO_USDC_VAULT_BASE }}
          MORPHO_WETH_VAULT_BASE=${{ env.MORPHO_WETH_VAULT_BASE }}
          UNISWAP_V2_ROUTER_BASE=${{ env.UNISWAP_V2_ROUTER_BASE }}
          UNISWAP_V3_NFT_MANAGER_BASE=${{ env.UNISWAP_V3_NFT_MANAGER_BASE }}
          WETH_YIELD_VAULT_BASE=${{ env.WETH_YIELD_VAULT_BASE }}
          SEARCH_SCOPE=${{ env.SEARCH_SCOPE }}
          ALLOWED_CHAIN_IDS=${{ env.ALLOWED_CHAIN_IDS }}
          REQUIRE_ADAPTER_BEFORE_RANK=${{ env.REQUIRE_ADAPTER_BEFORE_RANK }}
          WAVE_LOOP_INTERVAL_SECONDS=${{ env.WAVE_LOOP_INTERVAL_SECONDS }}
          PORTFOLIO_DRY_RUN=${{ env.PORTFOLIO_DRY_RUN }}
          ONCHAIN_ENABLED=${{ env.ONCHAIN_ENABLED }}
          VAULT_ABI_SOURCE=${{ env.VAULT_ABI_SOURCE }}
          # --- SECRETS ---
          RPC_URL=${{ secrets.RPC_URL }}
          PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}
          ETHERSCAN_API_KEY=${{ secrets.ETHERSCAN_API_KEY }}
          WETH_TOKEN_ADDRESS=${{ secrets.WETH_TOKEN_ADDRESS }}
          TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHATID=${{ secrets.TELEGRAM_CHATID }}
          ENV

      - name: Adapter coverage validation (fail-fast)
        run: |
          set -euo pipefail
          # Assicurati che lo script esista; in alternativa usa uno strumento equivalente
          python -m bots.wave_rotation.adapter_utils validate --config bots/wave_rotation/config.json

      - name: Run loop (≈15 min window)
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          set -euo pipefail
          set -a; source .env; set +a
          : > run.log
          echo "===== LOOP 1 / 3 =====" | tee -a run.log
          python -m bots.wave_rotation.strategy --loop ${WAVE_LOOP_INTERVAL_SECONDS} --dry-run 2>&1 | tee -a run.log
          echo "===== SLEEP =====" | tee -a run.log
          sleep ${WAVE_LOOP_INTERVAL_SECONDS}
          echo "===== LOOP 2 / 3 =====" | tee -a run.log
          python -m bots.wave_rotation.strategy --loop ${WAVE_LOOP_INTERVAL_SECONDS} --dry-run 2>&1 | tee -a run.log

      - name: Extract loop digest
        if: always()
        run: |
          grep -E 'best=|active=|Score|score_|APY|r_day|r_interval|moltiplicatore|Stato|executed|SKIP|cooldown|buffer|onchain|Treasury|no_adapter|denylist|Exception|ERROR|revert|fallback|timeout' -n run.log || true

      - name: Fail if no adapters
        if: always()
        run: |
          if grep -qE 'no_adapter|SKIP.*no_adapters' run.log; then
            echo "❌ Nessun adapter valido per i pool selezionati"; exit 1;
          fi

      - name: Upload run.log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wave-rotation-loop-logs
          path: run.log
